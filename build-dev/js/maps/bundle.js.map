{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/lib/ScrollHandler.coffee","src/lib/bundle.js","src/lib/declare.js","src/lib/directives.js","src/lib/init.js","src/lib/main.js","src/lib/services.js"],"names":[],"mappings":"AAAA;ACAA,IAAA;;AAAM;EACW,uBAAA;AACT,QAAA;IAAA,OAAO,CAAC,GAAR,CAAY,8BAAZ;AACA;AAAA,SAAA,qCAAA;;AACI;AAAA,WAAA,wCAAA;;QACI,OAAO,CAAC,GAAR,CAAY,KAAZ,EAAmB,CAAA,CAAE,CAAF,CAAI,CAAC,IAAL,CAAU,IAAV,CAAnB,EAAoC,CAAA,CAAE,CAAF,CAAI,CAAC,MAAL,CAAA,CAAa,CAAC,GAAlD;AADJ;AADJ;IAIA,CAAA,CAAE,QAAF,CAAW,CAAC,MAAZ,CAAmB,OAAO,CAAC,GAAR,CAAY,YAAZ,CAAnB;IAIA,IAAC,CAAA,MAAD,CAAA;EAVS;;0BAYb,MAAA,GAAQ,SAAA;IACJ,IAAC,CAAA,aAAD,GAAiB,CAAA,CAAE,MAAF,CAAS,CAAC,SAAV,CAAA;WACjB,OAAO,CAAC,GAAR,CAAY,IAAC,CAAA,aAAb;EAFI;;;;;;AAIZ,MAAM,CAAC,OAAP,GAAiB;;;;ACjBjufile":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","class ScrollHandler\r\n    constructor: ->\r\n        console.log('initiliazed a ScrollHandler!')\r\n        for hType in ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']\r\n            for h in $(hType)\r\n                console.log(hType, $(h).attr('id'), $(h).offset().top)\r\n\r\n        $('window').scroll(console.log('scrolling!'))\r\n\r\n\r\n        # Get handling\r\n        @handle()\r\n\r\n    handle: ->\r\n        @currentScroll = $('body').scrollTop()\r\n        console.log(@currentScroll)\r\n\r\nmodule.exports = ScrollHandler\r\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar ScrollHandler;\n\nScrollHandler = (function() {\n  function ScrollHandler() {\n    var h, hType, i, j, len, len1, ref, ref1;\n    console.log('initiliazed a ScrollHandler!');\n    ref = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n    for (i = 0, len = ref.length; i < len; i++) {\n      hType = ref[i];\n      ref1 = $(hType);\n      for (j = 0, len1 = ref1.length; j < len1; j++) {\n        h = ref1[j];\n        console.log(hType, $(h).attr('id'), $(h).offset().top);\n      }\n    }\n    $('window').scroll(console.log('scrolling!'));\n    this.handle();\n  }\n\n  ScrollHandler.prototype.handle = function() {\n    this.currentScroll = $('body').scrollTop();\n    return console.log(this.currentScroll);\n  };\n\n  return ScrollHandler;\n\n})();\n\nmodule.exports = ScrollHandler;\n\n\n},{}],2:[function(require,module,exports){\nScrollHandler = require('./ScrollHandler');\r\n\r\n$(document).ready(function() {\r\n\r\n    $('body').scrollspy({\r\n        target: '#tableofcontents'\r\n    });\r\n});\r\n\n},{\"./ScrollHandler\":1}]},{},[1,2])\n\n\n//# sourceMappingURL=maps/bundle.js.map\n","/*global angular,console,canvg*/\r\nangular.module(\"app\", [\"angularplasmid\"]);\r\n","/*global angular*/\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module(\"angularplasmid\", [\"angularplasmid.services\", \"ngMaterial\", \"ngAnimate\", \"ui.bootstrap\", \"colorpicker.module\"])\r\n\r\n        .config(function($mdThemingProvider) {\r\n            $mdThemingProvider.theme('default')\r\n                .primaryPalette('blue')\r\n                .accentPalette('indigo');\r\n        })\r\n\r\n        // Custom controller for user interface\r\n        .controller('PlasmidCtrl', ['$scope', 'SVGUtil', '$http', function ($scope, SVGUtil, $http, DataSource) {\r\n\r\n            var xmlTransform = [];\r\n            $scope.URLinputform = true;\r\n            $scope.URLinputform2 = true;\r\n            $scope.PartendOption = true;\r\n            $scope.font_size='';\r\n            $scope.labe_direction ='in';\r\n            $scope.tick_color = \"#ff0000\";\r\n            $scope.minor_tick_color = \"#d3d3d3\";\r\n            $scope.label_color = \"#000000\";\r\n            $scope.track_color = \"#f0f0f0\";\r\n            $scope.part_label_color = \"#000000\";\r\n            $scope.label_direction = \"in\";\r\n            $scope.font_choice = \"Arial\";\r\n            $scope.minorinterval= 50;\r\n\r\n            // List of fonts, default is Arial\r\n            $scope.fonts = [\r\n                { face: \"Arial\" },\r\n                { face: \"Tahoma\" },\r\n                { face: \"Trebuchet MS\" },\r\n                { face: \"Verdana\" },\r\n                { face: \"Times\" },\r\n                { face: \"Georgia\" },\r\n                { face: \"Courier\" },\r\n                    ];\r\n            $scope.font = $scope.fonts[0];\r\n\r\n            $scope.isInputFormCollapsed = true;\r\n            $scope.isDataCollapsed = true;\r\n            $scope.plasmidname = '';\r\n            var inputMin = 1;\r\n\r\n            $scope.otherend;\r\n\r\n            // The input list is also empty at the start\r\n            $scope.part = [\r\n                {\r\n                'name':'',\r\n                'start':'',\r\n                'basepairs':'',\r\n                'height':'',\r\n                'color':'',\r\n                'fwdarrow':'',\r\n                'revarrow':'',\r\n                'line':'',\r\n                'curve':'', \r\n                'link': '',\r\n                'end': '',                   \r\n                }];\r\n            \r\n\r\n            // The list of parts starts off empty\r\n            $scope.parts = [\r\n\r\n                {\r\n                'name':'',\r\n                'start':'',\r\n                'basepairs':'',\r\n                'height':'',\r\n                'color':'',\r\n                'fwdarrow':'',\r\n                'revarrow':'',\r\n                'line':'',\r\n                'curve':'',\r\n                'link':'',                  \r\n                }];\r\n\r\n            // Add each of the part attirbutes to the parts list and clear its value\r\n            $scope.addRow = function () {\r\n\r\n                if($scope.part.end > 0) {\r\n                    $scope.part.basepairs = $scope.part.end - $scope.part.start;\r\n                }\r\n\r\n                {\r\n                    $scope.parts.push({ 'name':$scope.part.name, 'start':$scope.part.start, 'basepairs':$scope.part.basepairs, 'height':$scope.part.height, 'color':$scope.part.color, 'fwdarrow':$scope.part.fwdarrow, 'revarrow':$scope.part.revarrow, 'curve':$scope.part.curve, 'line':$scope.part.line, 'link':$scope.part.link });\r\n                    $scope.part.name='';\r\n                    $scope.part.start='';\r\n                    $scope.part.basepairs='';\r\n                    $scope.part.height='';\r\n                    $scope.part.color='';\r\n                    $scope.part.fwdarrow='';\r\n                    $scope.part.revarrow='';\r\n                    $scope.part.line='';\r\n                    $scope.part.curve='';\r\n                    $scope.part.link='';\r\n                    $scope.part.end='';\r\n                    $scope.URLinputform = true;\r\n                }\r\n\r\n                };\r\n\r\n            // Remove the current row\r\n            $scope.removeRow = function(index) {\r\n                $scope.parts.splice( index, 1 );\r\n                };\r\n\r\n            $scope.toggle_options = false;\r\n            $scope.toggleOptions = function () {\r\n                $scope.toggle_options = $scope.toggle_options === false ? true: false;\r\n            }\r\n\r\n            $scope.toggle_value = true;\r\n            $scope.exported_svg = '';\r\n            $scope.exportSVG = function () {\r\n                $scope.toggle_value = $scope.toggle_value === false ? true: false;\r\n                $scope.exported_svg = document.getElementById(\"plasmid-view\").outerHTML;\r\n            };\r\n\r\n            this.selectedMode = 'md-fling';\r\n\r\n        }])\r\n\r\n        .directive(\"plasmidapi\", ['SVGUtil', function (SVGUtil) {\r\n            return {\r\n                restrict: \"AE\",\r\n                link : function (scope, elem, attr) {\r\n                    scope[attr.name] = SVGUtil.api;\r\n                }\r\n            };\r\n        }])\r\n\r\n        .directive(\"plasmid\", ['SVGUtil', function (SVGUtil) {\r\n            return {\r\n                restrict: 'AE',\r\n                type : 'svg',\r\n                template : '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"></svg>',\r\n                replace : true,\r\n                transclude: true,\r\n                require: 'plasmid',\r\n                scope: {\r\n                    plasmidheight : '@',\r\n                    plasmidwidth : '@',\r\n                    sequencelength : '@',\r\n                    sequence : '@',\r\n                    plasmidclass : '@',\r\n                    plasmidstyle : '@'\r\n                },\r\n                link : {\r\n                    pre : function (scope, elem, attr, plasmidController) {\r\n                        plasmidController.init(elem);\r\n                    },\r\n                    post : function (scope, elem, attrs, plasmidController, transcludeFn) {\r\n\r\n                        // Manually transclude children elements\r\n                        transcludeFn(scope.$parent, function (content) {\r\n                            elem.append(content);\r\n                        });\r\n\r\n                        // Watch for changes to plasmid\r\n                        scope.$watchGroup(['plasmidheight', 'plasmidwidth', 'sequencelength', 'sequence', 'plasmidclass', 'plasmidstyle'], function () {plasmidController.draw(); });\r\n                    }\r\n                },\r\n                controller : ['$scope', 'SVGUtil', function ($scope, SVGUtil) {\r\n                    var element, plasmid, tracks = [];\r\n\r\n                    plasmid = this;\r\n                    \r\n                    plasmid.elementtype = \"plasmid\";\r\n\r\n                    plasmid.init = function (elem) {\r\n                        SVGUtil.api.addPlasmid(plasmid);\r\n                        element = elem;\r\n                        plasmid.id = element.attr(\"id\");\r\n                    };\r\n\r\n                    plasmid.draw = function () {\r\n                        var d = plasmid.dimensions, plasmidclass = element.plasmidclass, plasmidstyle = element.plasmidstyle;\r\n                        element.attr(\"height\", d.height);\r\n                        element.attr(\"width\", d.width);\r\n                        if (plasmidclass) {element.attr(\"class\",plasmidclass);}\r\n                        if (plasmidstyle) {element.attr(\"style\", plasmidstyle);}\r\n\r\n                        angular.forEach(tracks, function (t) {\r\n                            t.draw();\r\n                        });\r\n                    };\r\n\r\n                    plasmid.addTrack = function (track) {\r\n                        tracks.push(track);\r\n                    };\r\n\r\n                    Object.defineProperty(plasmid, \"center\", {\r\n                        get: function () {\r\n                            var d = plasmid.dimensions;\r\n                            return {\r\n                                x : d.width / 2,\r\n                                y : d.height / 2\r\n                            };\r\n                        }\r\n                    });\r\n                    Object.defineProperty(plasmid, \"dimensions\", {\r\n                        get: function () {\r\n                            return {\r\n                                height : SVGUtil.util.Numeric($scope.plasmidheight, 300),\r\n                                width : SVGUtil.util.Numeric($scope.plasmidwidth, 300)\r\n                            };\r\n                        }\r\n                    });\r\n                    Object.defineProperty(plasmid, \"sequencelength\", {\r\n                        get: function () {\r\n                            return (plasmid.sequence ? plasmid.sequence.length : SVGUtil.util.Numeric($scope.sequencelength));\r\n                        }\r\n                    });\r\n                    Object.defineProperty(plasmid, \"sequence\", {\r\n                        get: function () {\r\n                            return $scope.sequence;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(plasmid, \"plasmidclass\", {\r\n                        get: function () {\r\n                            return $scope.plasmidclass;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(plasmid, \"plasmidstyle\", {\r\n                        get: function () {\r\n                            return $scope.plasmidstyle;\r\n                        }\r\n                    });                    \r\n                    plasmid.tracks = tracks;\r\n                }]\r\n            };\r\n        }])\r\n\r\n        .directive(\"plasmidtrack\", ['SVGUtil', '$compile', function (SVGUtil, $compile) {\r\n            return {\r\n                restrict: 'AE',\r\n                type : 'svg',\r\n                template: '<g><path></path></g>',\r\n                replace : true,\r\n                transclude: true,\r\n                require: ['plasmidtrack', '^plasmid'],\r\n                scope: {\r\n                    radius: '@',\r\n                    width: '@',\r\n                    trackclass: '@',\r\n                    trackstyle: '@',\r\n                    trackclick: '&'\r\n                },\r\n                link : {\r\n                    pre : function (scope, elem, attr, controllers, transcludeFn) {\r\n                        var trackController = controllers[0], plasmidController = controllers[1], pathElem = angular.element(elem.children()[0]);\r\n                        trackController.init(pathElem, plasmidController);\r\n                    },\r\n                    post : function (scope, elem, attr, controllers, transcludeFn) {\r\n\r\n                        // Manually transclude children elements\r\n                        transcludeFn(scope.$parent, function (content) {\r\n                            elem.append(content);\r\n                        });\r\n\r\n                        // Apply special style to path to allow for correct display and apply directive's properties (class, style, id, name) to the path instead of the g\r\n                        var g = angular.element(elem), path  = angular.element(elem.children()[0]), trackController = controllers[0];\r\n                        SVGUtil.util.swapProperties(g, path);\r\n                        path.attr(\"fill-rule\", \"evenodd\");\r\n                        $compile(path)(scope.$parent);\r\n\r\n                        //Attach event handlers\r\n                        path.on(\"click\", function (e) {\r\n                            scope.trackclick({\r\n                                $event: e,\r\n                                $track: trackController\r\n                            });\r\n                        });\r\n\r\n\r\n                        // Watch for changes in the track\r\n                        scope.$watchGroup(['radius', 'width', 'trackstyle', 'trackclass'], function () {trackController.draw(); });\r\n                    }\r\n                },\r\n                    \r\n                controller : ['$scope', function ($scope) {\r\n                    var plasmid, element, plasmidTrack, markers = [], scales = [], labels = [];\r\n\r\n                    plasmidTrack = this;\r\n                    \r\n                    plasmidTrack.elementtype = \"plasmidtrack\";\r\n\r\n                    plasmidTrack.init = function (elem, plasmidCtrl) {\r\n                        plasmid = plasmidCtrl;\r\n                        plasmid.addTrack(plasmidTrack);\r\n                        plasmidTrack.plasmid = plasmid;\r\n                        element = elem;\r\n                    };\r\n\r\n                    plasmidTrack.draw = function () {\r\n                        var center = plasmidTrack.center,\r\n                            path = SVGUtil.svg.path.donut(center.x, center.y, plasmidTrack.radius, plasmidTrack.width),\r\n                            trackclass = plasmidTrack.trackclass, \r\n                            trackstyle = plasmidTrack.trackstyle;\r\n                        \r\n                        element.attr(\"d\", path);\r\n                        if (trackclass) {element.attr(\"class\",trackclass);}\r\n                        if (trackstyle) {element.attr(\"style\", trackstyle);}\r\n                        \r\n                        angular.forEach(markers, function (m) {\r\n                            m.draw();\r\n                        });\r\n                        angular.forEach(scales, function (s) {\r\n                            s.draw();\r\n                        });\r\n                        angular.forEach(labels, function (l) {\r\n                            l.draw();\r\n                        });\r\n                    };\r\n\r\n                    plasmidTrack.addMarker = function (marker) {\r\n                        markers.push(marker);\r\n                    };\r\n\r\n                    plasmidTrack.addScale = function (scale) {\r\n                        scales.push(scale);\r\n                    };\r\n                    \r\n                    plasmidTrack.addLabel = function (label) {\r\n                        labels.push(label);\r\n                    };\r\n\r\n                    plasmidTrack.markergroup = function (groupName) {\r\n                        var items = [];\r\n                        angular.forEach(markers, function (marker) {\r\n                            if (marker.markergroup === groupName) {\r\n                                items.push(marker);\r\n                            }\r\n                        });\r\n                        return items;\r\n                    };\r\n\r\n                    plasmidTrack.getPosition = function (pos, positionOption, radiusAdjust) {\r\n                        radiusAdjust = Number(radiusAdjust || 0);\r\n                        pos = Number(pos);\r\n\r\n                        var POSITION_OPTION_MID = 0, POSITION_OPTION_INNER = 1, POSITION_OPTION_OUTER = 2,\r\n                            radius, angle, center = plasmidTrack.center,\r\n                            seqLen = plasmid.sequencelength;\r\n\r\n                        if (seqLen > 0) {\r\n                            angle = (pos / seqLen) * 360;\r\n\r\n                            switch (positionOption) {\r\n                            case POSITION_OPTION_INNER:\r\n                                radius = plasmidTrack.radius + radiusAdjust;\r\n                                break;\r\n                            case POSITION_OPTION_OUTER:\r\n                                radius = plasmidTrack.radius + plasmidTrack.width + radiusAdjust;\r\n                                break;\r\n                            default:\r\n                                radius = plasmidTrack.radius + (plasmidTrack.width / 2) + radiusAdjust;\r\n                                break;\r\n                            }\r\n                            return SVGUtil.util.polarToCartesian(center.x, center.y, radius, angle);\r\n                        }\r\n                    };\r\n                    Object.defineProperty(plasmidTrack, \"center\", {\r\n                        get: function () {\r\n                            return plasmid.center;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(plasmidTrack, \"radius\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.radius, 100);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(plasmidTrack, \"width\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.width, 25);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(plasmidTrack, \"trackclass\", {\r\n                        get: function () {\r\n                            return $scope.trackclass;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(plasmidTrack, \"trackstyle\", {\r\n                        get: function () {\r\n                            return $scope.trackstyle;\r\n                        }\r\n                    });\r\n\r\n                    plasmidTrack.markers = markers;\r\n                    plasmidTrack.scales = scales;\r\n                    plasmidTrack.labels = labels;\r\n\r\n                }]\r\n            };\r\n        }])\r\n\r\n        .directive(\"trackscale\", ['SVGUtil', '$compile', function (SVGUtil, $compile) {\r\n            return {\r\n                restrict: 'AE',\r\n                type : 'svg',\r\n                template: '<g><path></path><g></g></g>',\r\n                replace : true,\r\n                transclude: true,\r\n                require: ['trackscale', '^plasmidtrack'],\r\n                scope: {\r\n                    interval: \"@\",\r\n                    vadjust: \"@\",\r\n                    ticksize: \"@\",\r\n                    direction: \"@\",\r\n                    showlabels : \"@\",\r\n                    labelvadjust : \"@\",\r\n                    labelclass : \"@\",\r\n                    labelstyle : \"@\",\r\n                    tickclass : \"@\",\r\n                    tickstyle : \"@\",\r\n                    scaleclick : \"&\"\r\n                },\r\n                link : {\r\n                    pre : function (scope, elem, attr, controllers, transcludeFn) {\r\n                        var scaleController = controllers[0], trackController = controllers[1], pathElem = angular.element(elem.children()[0]), groupElem = angular.element(elem.children()[1]);\r\n                        scaleController.init(pathElem, groupElem, trackController);\r\n                    },\r\n                    post : function (scope, elem, attr, controllers, transcludeFn) {\r\n\r\n                        var g, path, scaleController;\r\n\r\n                        //Manually transclude children elements\r\n                        transcludeFn(scope.$parent, function (content) {\r\n                            elem.append(content);\r\n                        });\r\n\r\n                        //Apply directive's properties (class, style, id, name) to the path instead of the g\r\n                        g = angular.element(elem);\r\n                        path  = angular.element(elem.children()[0]);\r\n                        SVGUtil.util.swapProperties(g, path);\r\n                        $compile(path)(scope.$parent);\r\n\r\n                        \r\n                        //Attach event handlers\r\n                        path.on(\"click\", function (e) {\r\n                            scope.scaleclick({\r\n                                $event: e,\r\n                                $scale: scaleController\r\n                            });\r\n                        });\r\n                        \r\n                        // Watch for changes to scale\r\n                        scaleController = controllers[0];\r\n                        scope.$watchGroup(['interval', 'vadjust', 'ticksize', 'labelvadjust', 'direction', 'showlabels', 'labelstyle', 'labelclass','tickstyle','tickclass'], function () {scaleController.draw(); });\r\n\r\n                    }\r\n                },\r\n                controller : ['$scope', function ($scope) {\r\n                    var track, trackScale, element, groupElement,\r\n                        DEFAULT_LABELVADJUST = 15, DEFAULT_TICKSIZE = 3;\r\n\r\n                    trackScale = this;\r\n                    trackScale.elementtype = \"trackscale\";\r\n                    \r\n                    trackScale.init = function (elem, groupElem, trackCtrl) {\r\n                        track = trackCtrl;\r\n                        track.addScale(trackScale);\r\n                        trackScale.track = track;\r\n                        element = elem;\r\n                        groupElement = groupElem;\r\n                    };\r\n\r\n                    trackScale.draw = function () {\r\n                        var tickclass = trackScale.tickclass,\r\n                            tickstyle = trackScale.tickstyle,\r\n                            center = track.center,\r\n                            path = SVGUtil.svg.path.scale(center.x, center.y, trackScale.radius, trackScale.interval, trackScale.total, trackScale.ticksize);\r\n\r\n                        element.attr(\"d\", path);\r\n                        if (tickclass) {element.attr(\"class\",tickclass);}\r\n                        if (tickstyle) {element.attr(\"style\", tickstyle);}\r\n\r\n                        \r\n                        if (trackScale.showlabels) {\r\n                            trackScale.drawLabel();\r\n                        } else {\r\n                            groupElement.empty();\r\n                        }\r\n                    };\r\n\r\n                    trackScale.drawLabel = function () {\r\n                        var i, t, labels, center = track.center;\r\n\r\n                        function clickHandler(e) {\r\n                            $scope.scaleclick({\r\n                                $event: e,\r\n                                $scale: trackScale\r\n                            });\r\n                        }\r\n                        \r\n                        labels = SVGUtil.svg.element.scalelabels(center.x, center.y, trackScale.labelradius, trackScale.interval, trackScale.total);\r\n                        groupElement.empty();\r\n                        for (i = 0; i <= labels.length - 1; i += 1) {\r\n                            t = angular.element(SVGUtil.svg.createNode('text'));\r\n                            if (trackScale.labelclass) { t.attr('class', trackScale.labelclass); }\r\n                            if (trackScale.labelstyle) { t.attr('style', trackScale.labelstyle); }\r\n                            t.attr(\"x\", labels[i].x);\r\n                            t.attr(\"y\", labels[i].y);\r\n                            t.attr(\"text-anchor\", \"middle\");\r\n                            t.attr(\"alignment-baseline\", \"middle\");\r\n                            t.text(labels[i].text);\r\n                            t.on(\"click\", clickHandler);\r\n                            groupElement.append(t);\r\n                        }\r\n                    };\r\n                    Object.defineProperty(trackScale, \"radius\", {\r\n                        get: function () {\r\n                            return (trackScale.inwardflg ? track.radius : track.radius + track.width) +  ((trackScale.inwardflg ? -1 : 1) * trackScale.vadjust) + (trackScale.inwardflg ? -(trackScale.ticksize) : 0);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackScale, \"interval\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.interval);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackScale, \"vadjust\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.vadjust);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackScale, \"ticksize\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.ticksize, DEFAULT_TICKSIZE);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackScale, \"inwardflg\", {\r\n                        get: function () {\r\n                            return $scope.direction === 'in' ? true : false;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackScale, \"total\", {\r\n                        get: function () {\r\n                            return track.plasmid.sequencelength;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackScale, \"showlabels\", {\r\n                        get: function () {\r\n                            return $scope.showlabels === \"1\" ? true : false;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackScale, \"labelvadjust\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.labelvadjust, DEFAULT_LABELVADJUST);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackScale, \"tickclass\", {\r\n                        get: function () {\r\n                            return $scope.tickclass;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackScale, \"tickstyle\", {\r\n                        get: function () {\r\n                            return $scope.tickstyle;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackScale, \"labelclass\", {\r\n                        get: function () {\r\n                            return $scope.labelclass;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackScale, \"labelstyle\", {\r\n                        get: function () {\r\n                            return $scope.labelstyle;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackScale, \"labelradius\", {\r\n                        get: function () {\r\n                            return trackScale.radius + (trackScale.labelvadjust * (trackScale.inwardflg ? -1 : 1));\r\n                        }\r\n                    });\r\n                }]\r\n            };\r\n        }])\r\n    \r\n        .directive(\"tracklabel\", ['SVGUtil', function (SVGUtil) {\r\n            return {\r\n                restrict: 'AE',\r\n                type : 'svg',\r\n                template: '<text></text>',\r\n                replace : true,\r\n                transclude: true,\r\n                require: ['tracklabel', '^plasmidtrack'],\r\n                scope: {\r\n                    text: \"@\",\r\n                    hadjust : \"@\",\r\n                    vadjust : \"@\",\r\n                    labelclass: \"@\",\r\n                    labelstyle : '@',\r\n                    labelclick : \"&\"\r\n                },\r\n                link : {\r\n                    pre : function (scope, elem, attr, controllers, transcludeFn) {\r\n                        var labelController = controllers[0], trackController = controllers[1], textElem = angular.element(elem[0]);\r\n                        labelController.init(textElem, trackController);\r\n                    },\r\n                    post : function (scope, elem, attr, controllers, transcludeFn) {\r\n\r\n                        var labelController;\r\n\r\n                        //Manually transclude children elements\r\n                        transcludeFn(scope.$parent, function (content) {\r\n                            elem.append(content);\r\n                        });\r\n\r\n                        // Set some default properties for the label display\r\n                        elem.attr(\"text-anchor\", \"middle\");\r\n                        elem.attr(\"alignment-baseline\", \"middle\");\r\n\r\n                        //Attach event handlers\r\n                        elem.on(\"click\", function (e) {\r\n                            scope.labelclick({\r\n                                $event: e,\r\n                                $label: labelController\r\n                            });\r\n                        });\r\n\r\n                        // Watch for changes to label\r\n                        labelController = controllers[0];\r\n                        scope.$watchGroup(['text', 'vadjust', 'hadjust','labelstyle','labelclass'], function () {labelController.draw(); });\r\n                    }\r\n                },\r\n                controller : ['$scope', function ($scope) {\r\n                    var track, trackLabel, element;\r\n                    \r\n                    trackLabel = this;\r\n                    trackLabel.elementtype = \"tracklabel\";\r\n\r\n                    trackLabel.init = function (elem, trackCtrl) {\r\n                        track = trackCtrl;\r\n                        track.addLabel(trackLabel);\r\n                        trackLabel.track = track;\r\n                        element = elem;\r\n                    };\r\n\r\n                    trackLabel.draw = function () {\r\n                        var center = track.center, startX, startY,\r\n                            labelclass = trackLabel.labelclass,\r\n                            labelstyle = trackLabel.labelstyle;\r\n\r\n                        element.attr(\"x\", center.x + trackLabel.hadjust);\r\n                        element.attr(\"y\", center.y + trackLabel.vadjust);\r\n                        element.text(trackLabel.text);\r\n                        if (labelclass) {element.attr(\"class\",labelclass);}\r\n                        if (labelstyle) {element.attr(\"style\", labelstyle);}\r\n                    };\r\n\r\n                    Object.defineProperty(trackLabel, \"center\", {\r\n                        get: function () {\r\n                            return track.center;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackLabel, \"text\", {\r\n                        get: function () {\r\n                            return $scope.text;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackLabel, \"labelclass\", {\r\n                        get: function () {\r\n                            return $scope.labelclass;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackLabel, \"labelstyle\", {\r\n                        get: function () {\r\n                            return $scope.labelstyle;\r\n                        }\r\n                    });                    \r\n                    Object.defineProperty(trackLabel, \"hadjust\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.hadjust, 0);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackLabel, \"vadjust\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.vadjust, 0);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(trackLabel, \"dimensions\", {\r\n                        get: function () {\r\n                            return element[0].getBBox();\r\n                        }\r\n                    });\r\n                }]\r\n            };\r\n        }])\r\n\r\n        .directive(\"trackmarker\", ['SVGUtil', '$compile', function (SVGUtil, $compile) {\r\n            return {\r\n                restrict: 'AE',\r\n                type : 'svg',\r\n                template: '<g><path></path></g>',\r\n                replace : true,\r\n                transclude: true,\r\n                require: ['trackmarker', '^plasmidtrack'],\r\n                scope: {\r\n                    start: \"@\",\r\n                    end: \"@\",\r\n                    vadjust: \"@\",\r\n                    wadjust: \"@\",\r\n                    markergroup: \"@\",\r\n                    arrowstartlength : \"@\",\r\n                    arrowstartwidth : \"@\",\r\n                    arrowstartangle : \"@\",\r\n                    arrowendlength : \"@\",\r\n                    arrowendwidth : \"@\",\r\n                    arrowendangle : \"@\",\r\n                    markerclass : \"@\",\r\n                    markerstyle : \"@\",\r\n                    markerclick: \"&\"\r\n                },\r\n                link : {\r\n                    pre : function (scope, elem, attr, controllers, transcludeFn) {\r\n                        var markerController = controllers[0], trackController = controllers[1], pathElem = angular.element(elem.children()[0]);\r\n                        markerController.init(pathElem, trackController);\r\n                    },\r\n                    post : function (scope, elem, attr, controllers, transcludeFn) {\r\n\r\n                        var markerController = controllers[0], g, path;\r\n\r\n                        //Manually transclude children elements\r\n                        transcludeFn(scope.$parent, function (content) {\r\n                            elem.append(content);\r\n                        });\r\n\r\n                        //Apply directive's properties (class, style, id, name) to the path instead of the g\r\n                        g = angular.element(elem);\r\n                        path  = angular.element(elem.children()[0]);\r\n                        SVGUtil.util.swapProperties(g, path);\r\n                        $compile(path)(scope.$parent);\r\n\r\n                        //Attach event handlers\r\n                        path.on(\"click\", function (e) {\r\n                            scope.markerclick({\r\n                                $event: e,\r\n                                $marker: markerController\r\n                            });\r\n                        });\r\n\r\n                        // Watch for changes to marker\r\n                        scope.$watchGroup(['start', 'end', 'vadjust', 'wadjust', 'markergroup', 'markerclass','markerstyle','arrowstartlength', 'arrowstartwidth', 'arrowstartangle', 'arrowendlength', 'arrowendwidth', 'arrowendangle'], function () {markerController.draw(); });\r\n\r\n                    }\r\n                },\r\n                controller : ['$scope', function ($scope) {\r\n                    var track, marker, element, markerLabels = [];\r\n\r\n                    marker = this;\r\n                    marker.elementtype = \"trackmarker\";\r\n\r\n                    marker.init = function (elem, trackCtrl) {\r\n                        track = trackCtrl;\r\n                        track.addMarker(marker);\r\n                        element = elem;\r\n                        marker.track = track;\r\n                    };\r\n\r\n                    marker.draw = function () {\r\n                        var markerclass = marker.markerclass,\r\n                            markerstyle = marker.markerstyle;\r\n                        \r\n                        element.attr(\"d\", marker.getPath());\r\n                        if (markerclass) {element.attr(\"class\",markerclass);}\r\n                        if (markerstyle) {element.attr(\"style\", markerstyle);}\r\n                        angular.forEach(markerLabels, function (markerLabel) {\r\n                            markerLabel.draw();\r\n                        });\r\n                    };\r\n\r\n                    marker.addMarkerLabel = function (markerLabel) {\r\n                        markerLabels.push(markerLabel);\r\n                    };\r\n\r\n                    marker.getPath = function () {\r\n                        var center = track.center, angle = marker.angle, radius = marker.radius;\r\n                        return SVGUtil.svg.path.arc(center.x, center.y, radius.inner, angle.start, angle.end, marker.width, marker.arrowstart, marker.arrowend);\r\n                    };\r\n\r\n                    marker.getPosition = function (hAdjust, vAdjust, hAlign, vAlign) {\r\n                        var HALIGN_MIDDLE = \"middle\", HALIGN_START = \"start\", HALIGN_END = \"end\",\r\n                            VALIGN_MIDDLE = \"middle\", VALIGN_INNER = \"inner\", VALIGN_OUTER = \"outer\",\r\n                            center, radius, angle, markerRadius, markerAngle;\r\n\r\n                        center = track.center;\r\n                        markerRadius = marker.radius;\r\n                        markerAngle = marker.angle;\r\n                        hAdjust = SVGUtil.util.Numeric(hAdjust);\r\n                        vAdjust = SVGUtil.util.Numeric(vAdjust);\r\n\r\n                        if (vAlign !== undefined && hAlign !== undefined) {\r\n                            switch (vAlign) {\r\n                            case VALIGN_INNER:\r\n                                radius =  markerRadius.inner + vAdjust;\r\n                                break;\r\n                            case VALIGN_OUTER:\r\n                                radius =  markerRadius.outer + vAdjust;\r\n                                break;\r\n                            default:\r\n                                radius =  markerRadius.middle + vAdjust;\r\n                                break;\r\n                            }\r\n\r\n                            switch (hAlign) {\r\n                            case HALIGN_START:\r\n                                angle = markerAngle.start + hAdjust;\r\n                                break;\r\n                            case HALIGN_END:\r\n                                angle = markerAngle.end + hAdjust;\r\n                                break;\r\n                            default:\r\n                                angle = markerAngle.middle + hAdjust;\r\n                                break;\r\n                            }\r\n\r\n                            return SVGUtil.util.polarToCartesian(center.x, center.y, radius, angle);\r\n                        } else {\r\n\r\n                            radius = {\r\n                                outer : markerRadius.outer + vAdjust,\r\n                                inner : markerRadius.inner + vAdjust,\r\n                                middle : markerRadius.middle + vAdjust\r\n                            };\r\n\r\n                            angle = {\r\n                                begin : markerAngle.start + hAdjust,\r\n                                end : markerAngle.end + hAdjust,\r\n                                middle : markerAngle.middle + hAdjust\r\n                            };\r\n\r\n\r\n                            return {\r\n                                outer : {\r\n                                    begin: SVGUtil.util.polarToCartesian(center.x, center.y, radius.outer, angle.begin),\r\n                                    middle: SVGUtil.util.polarToCartesian(center.x, center.y, radius.outer, angle.middle),\r\n                                    end: SVGUtil.util.polarToCartesian(center.x, center.y, radius.outer, angle.end)\r\n                                },\r\n                                middle : {\r\n                                    begin: SVGUtil.util.polarToCartesian(center.x, center.y, radius.middle, angle.begin),\r\n                                    middle: SVGUtil.util.polarToCartesian(center.x, center.y, radius.middle, angle.middle),\r\n                                    end: SVGUtil.util.polarToCartesian(center.x, center.y, radius.middle, angle.end)\r\n                                },\r\n                                inner : {\r\n                                    begin: SVGUtil.util.polarToCartesian(center.x, center.y, radius.inner, angle.begin),\r\n                                    middle: SVGUtil.util.polarToCartesian(center.x, center.y, radius.inner, angle.middle),\r\n                                    end: SVGUtil.util.polarToCartesian(center.x, center.y, radius.inner, angle.end)\r\n                                }\r\n                            };\r\n                        }\r\n\r\n                    };\r\n                    marker.fireClick = function (event) {\r\n                        $scope.markerclick({\r\n                            $event: event.$event,\r\n                            $marker: event.$marker\r\n                        });\r\n                    };\r\n                    Object.defineProperty(marker, \"center\", {\r\n                        get: function () {\r\n                            return track.center;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(marker, \"radius\", {\r\n                        get: function () {\r\n                            return {\r\n                                inner : track.radius + marker.vadjust,\r\n                                outer : track.radius + marker.vadjust + marker.width,\r\n                                middle : track.radius + marker.vadjust + marker.width / 2\r\n                            };\r\n                        }\r\n                    });\r\n                    Object.defineProperty(marker, \"angle\", {\r\n                        get: function () {\r\n                            var startAngle, endAngle, midAngle, end;\r\n\r\n                            startAngle = (marker.start / track.plasmid.sequencelength) * 360;\r\n\r\n                            end = $scope.end || $scope.start;\r\n                            endAngle = (SVGUtil.util.Numeric(end) / track.plasmid.sequencelength) * 360;\r\n                            endAngle += (endAngle < startAngle) ? 360 : 0;\r\n\r\n                            midAngle = startAngle + ((endAngle - startAngle) / 2);\r\n\r\n                            return {\r\n                                start : startAngle,\r\n                                middle : midAngle,\r\n                                end : endAngle\r\n                            };\r\n                        }\r\n                    });\r\n                    Object.defineProperty(marker, \"vadjust\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.vadjust);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(marker, \"wadjust\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.wadjust);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(marker, \"width\", {\r\n                        get: function () {\r\n                            return track.width + marker.wadjust;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(marker, \"start\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.start);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(marker, \"end\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.end);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(marker, \"arrowstart\", {\r\n                        get: function () {\r\n                            return {\r\n                                width : SVGUtil.util.Numeric($scope.arrowstartwidth),\r\n                                length : SVGUtil.util.Numeric($scope.arrowstartlength),\r\n                                angle : SVGUtil.util.Numeric($scope.arrowstartangle)\r\n                            };\r\n                        }\r\n                    });\r\n                    Object.defineProperty(marker, \"arrowend\", {\r\n                        get: function () {\r\n                            return {\r\n                                width : SVGUtil.util.Numeric($scope.arrowendwidth),\r\n                                length : SVGUtil.util.Numeric($scope.arrowendlength),\r\n                                angle : SVGUtil.util.Numeric($scope.arrowendangle)\r\n                            };\r\n                        }\r\n                    });\r\n                    Object.defineProperty(marker, \"markergroup\", {\r\n                        get: function () {\r\n                            return $scope.markergroup;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(marker, \"markerclass\", {\r\n                        get: function () {\r\n                            return $scope.markerclass;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(marker, \"markerstyle\", {\r\n                        get: function () {\r\n                            return $scope.markerstyle;\r\n                        }\r\n                    });                                        \r\n                    Object.defineProperty(marker, \"sequence\", {\r\n                        get: function () {\r\n                            var plasmidSeq = marker.track.plasmid.sequence,\r\n                                markerSeq = '';\r\n                            \r\n                            if (marker.start > marker.end) {\r\n                                return plasmidSeq.substring(marker.start - 1, plasmidSeq.length - 1) + plasmidSeq.substring(0, marker.end - 1);\r\n                            } else {\r\n                                return plasmidSeq.substring(marker.start - 1, marker.end - 1);\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    marker.labels = markerLabels;\r\n\r\n                }]\r\n            };\r\n        }])\r\n\r\n        .directive(\"markerlabel\", ['SVGUtil', '$compile', function (SVGUtil, $compile) {\r\n\r\n            return {\r\n                restrict: 'AE',\r\n                type : 'svg',\r\n                transclude: true,\r\n                template: '<g><path></path><path id=\"\" style=\"fill:none;stroke:none\"></path><text></text></g>',\r\n                require: ['markerlabel', '^trackmarker'],\r\n                replace : true,\r\n                scope: {\r\n                    text : \"@\",\r\n                    valign : \"@\",\r\n                    vadjust : \"@\",\r\n                    halign : \"@\",\r\n                    hadjust : \"@\",\r\n                    type : \"@\",\r\n                    showline : \"@\",\r\n                    linestyle : \"@\",\r\n                    lineclass : \"@\",\r\n                    labelstyle : \"@\",\r\n                    labelclass : \"@\",\r\n                    linevadjust : \"@\",\r\n                    labelclick : \"&\"\r\n                },\r\n                link: {\r\n                    pre : function (scope, elem, attr, controllers, transcludeFn) {\r\n                        var markerlabelController = controllers[0],\r\n                            trackMarkerController = controllers[1],\r\n                            groupElem = angular.element(elem[0]),\r\n                            lineElem = angular.element(elem.children()[0]),\r\n                            pathElem = angular.element(elem.children()[1]),\r\n                            textElem = angular.element(elem.children()[2]);\r\n\r\n                        markerlabelController.init(textElem, groupElem, pathElem, lineElem, trackMarkerController);\r\n                    },\r\n                    post : function (scope, elem, attr, controllers, transcludeFn) {\r\n                        transcludeFn(scope.$parent, function (content) {\r\n                            elem.append(content);\r\n                        });\r\n\r\n                        var markerlabelController = controllers[0],\r\n                            trackMarkerController = controllers[1],\r\n                            g = angular.element(elem),\r\n                            text = angular.element(elem.children()[2]);\r\n\r\n                        //Apply directive's properties (class, style, id, name) to the text\r\n                        text.attr(\"text-anchor\", \"middle\");\r\n                        text.attr(\"alignment-baseline\", \"middle\");\r\n                        SVGUtil.util.swapProperties(g, text);\r\n                        $compile(text)(scope.$parent);\r\n                        \r\n                        //Attach event handlers\r\n                        if (attr.labelclick) {\r\n                            text.on(\"click\", function (e) {\r\n                                scope.labelclick({\r\n                                    $event: e,\r\n                                    $label: markerlabelController\r\n                                });\r\n                            });\r\n                        // or bubble up events to the marker\r\n                        } else {\r\n                            text.on(\"click\", function (e) {\r\n                                trackMarkerController.fireClick({\r\n                                    $event: e,\r\n                                    $marker: trackMarkerController\r\n                                });\r\n                            });\r\n                        }\r\n                        \r\n                        // Watch for changes to label\r\n                        scope.$watchGroup(['text', 'type', 'valign', 'vadjust', 'halign', 'hadjust', 'showline', 'linevadjust', 'linestyle', 'labelclass','labelstyle'], function () {markerlabelController.draw(); });\r\n\r\n                    }\r\n                },\r\n                controller : ['$scope', '$compile', function ($scope, $compile) {\r\n                    var marker, markerLabel, textElement, pathElement, textPathElement, textPathSVG, lineElement, groupElement;\r\n\r\n                    markerLabel = this;\r\n                    markerLabel.elementtype = \"markerlabel\";\r\n\r\n                    markerLabel.init = function (textElem, groupElem, pathElem, lineElem, markerCtrl) {\r\n                        var id = 'TPATH' + (Math.random() + 1).toString(36).substring(3, 7);\r\n\r\n                        marker = markerCtrl;\r\n                        marker.addMarkerLabel(markerLabel);\r\n                        markerLabel.marker = marker;\r\n                        textElement = textElem;\r\n                        pathElement = pathElem;\r\n                        lineElement = lineElem;\r\n                        groupElement = groupElem;\r\n                        \r\n                        pathElement.attr(\"id\", id);\r\n\r\n                    };\r\n\r\n                    markerLabel.draw = function () {\r\n                        var VALIGN_MIDDLE = \"middle\", VALIGN_INNER = \"inner\", VALIGN_OUTER = \"outer\",\r\n                            HALIGN_MIDDLE = \"middle\", HALIGN_START = \"start\", HALIGN_END = \"end\",\r\n                            fontSize = 0, fontAdjust = 0,\r\n                            labelclass = markerLabel.labelclass, labelstyle = markerLabel.labelstyle,\r\n                            pos, markerAngle, src, dst, dstPos, dstV;\r\n\r\n                        if (labelclass) {textElement.attr(\"class\",labelclass);}\r\n                        if (labelstyle) {textElement.attr(\"style\", labelstyle);}\r\n\r\n                        if (markerLabel.type === 'path') {\r\n                            textElement.attr(\"x\",'');\r\n                            textElement.attr(\"y\",'');\r\n                            \r\n                            if (!textPathElement){\r\n                                textPathSVG = document.createElementNS('http://www.w3.org/2000/svg','textPath');\r\n                                textPathSVG.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", \"#\" + pathElement.attr(\"id\"));  \r\n                                textPathElement = angular.element(textPathSVG);\r\n                                $compile(textPathElement)($scope);\r\n                                textElement.empty();\r\n                                textElement.append(textPathElement);\r\n                            }\r\n                            \r\n                            textPathSVG.textContent = markerLabel.text;\r\n                            fontSize = window.getComputedStyle(textElement[0]).fontSize.replace(\"px\", \"\");\r\n                            fontAdjust = (markerLabel.valign === VALIGN_OUTER) ? 0 : (markerLabel.valign === VALIGN_INNER) ? Number(fontSize || 0) : Number(fontSize || 0) / 2;\r\n                            pathElement.attr(\"d\", markerLabel.getPath(markerLabel.hadjust, markerLabel.vadjust - fontAdjust, markerLabel.halign, markerLabel.valign));\r\n\r\n                            switch (markerLabel.halign) {\r\n                            case HALIGN_START:\r\n                                textElement.attr(\"text-anchor\", \"start\");\r\n                                textPathElement[0].setAttribute(\"startOffset\", \"0%\"); //jQuery can't handle case sensitive names so can't use textPathElem.attr\r\n                                break;\r\n                            case HALIGN_END:\r\n                                textElement.attr(\"text-anchor\", \"end\");\r\n                                textPathElement[0].setAttribute(\"startOffset\", \"100%\");//jQuery can't handle case sensitive names so can't use textPathElem.attr\r\n                                break;\r\n                            default:\r\n                                textElement.attr(\"text-anchor\", \"middle\");\r\n                                textPathElement[0].setAttribute(\"startOffset\", \"50%\");//jQuery can't handle case sensitive names so can't use textPathElem.attr\r\n                                break;\r\n                            }\r\n                        } else {\r\n                            if (textPathElement){\r\n                                textPathElement.remove();\r\n                                textPathElement = null;\r\n                            }\r\n                            pos = marker.getPosition(markerLabel.hadjust, markerLabel.vadjust, markerLabel.halign, markerLabel.valign);\r\n                            textElement.attr(\"x\", pos.x);\r\n                            textElement.attr(\"y\", pos.y);\r\n                            textElement.text(markerLabel.text);\r\n                        }\r\n\r\n                        if (markerLabel.showlineflg) {\r\n\r\n                            src = marker.getPosition(markerLabel.hadjust, markerLabel.vadjust + markerLabel.linevadjust, markerLabel.halign, markerLabel.valign);\r\n\r\n                            dstPos = marker.getPosition();\r\n                            dstV = markerLabel.valign === VALIGN_INNER ? dstPos.inner : markerLabel.valign === VALIGN_MIDDLE ? dstPos.middle : dstPos.outer;\r\n                            dst = markerLabel.halign === HALIGN_START ? dstV.begin : markerLabel.halign === HALIGN_END ? dstV.end : dstV.middle;\r\n\r\n                            lineElement.attr(\"d\", [\"M\", src.x, src.y, \"L\", dst.x, dst.y].join(\" \"));\r\n                            if (!markerLabel.linestyle && !markerLabel.lineclass) { lineElement.attr(\"style\", \"stroke:#000\"); }\r\n                            if (markerLabel.linestyle) { lineElement.attr(\"style\", markerLabel.linestyle); }\r\n                            if (markerLabel.lineclass) { lineElement.attr(\"class\", markerLabel.lineclass); }\r\n                        } else {\r\n                            lineElement.removeAttr(\"d\");\r\n                        }\r\n                    };\r\n\r\n                    markerLabel.getPath = function (hAdjust, vAdjust, hAlign, vAlign) {\r\n                        var VALIGN_MIDDLE = \"middle\", VALIGN_INNER = \"inner\", VALIGN_OUTER = \"outer\",\r\n                            HALIGN_MIDDLE = \"middle\", HALIGN_START = \"start\", HALIGN_END = \"end\",\r\n                            center = marker.center,\r\n                            radius, markerRadius, markerAngle, startAngle, endAngle;\r\n\r\n                        markerRadius = marker.radius;\r\n                        switch (vAlign) {\r\n                        case VALIGN_INNER:\r\n                            radius = markerRadius.inner;\r\n                            break;\r\n                        case VALIGN_OUTER:\r\n                            radius = markerRadius.outer;\r\n                            break;\r\n                        default:\r\n                            radius = markerRadius.middle;\r\n                            break;\r\n                        }\r\n\r\n                        markerAngle = marker.angle;\r\n                        switch (hAlign) {\r\n                        case HALIGN_START:\r\n                            startAngle = markerAngle.start;\r\n                            endAngle = markerAngle.start + 359.99;\r\n                            break;\r\n                        case HALIGN_END:\r\n                            startAngle = markerAngle.end + 1;\r\n                            endAngle = markerAngle.end;\r\n                            break;\r\n                        default:\r\n                            startAngle = markerAngle.middle + 180.05;\r\n                            endAngle = markerAngle.middle + 179.95;\r\n                            break;\r\n                        }\r\n\r\n                        return SVGUtil.svg.path.arc(center.x, center.y, radius + Number(vAdjust || 0), startAngle + Number(hAdjust || 0), endAngle + Number(hAdjust || 0), 1);\r\n                    };\r\n                    Object.defineProperty(markerLabel, \"showlineflg\", {\r\n                        get: function () {\r\n                            return ($scope.showline === \"1\" ? true : false);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(markerLabel, \"halign\", {\r\n                        get: function () {\r\n                            return $scope.halign || \"middle\";\r\n                        }\r\n                    });\r\n                    Object.defineProperty(markerLabel, \"valign\", {\r\n                        get: function () {\r\n                            return $scope.valign || \"middle\";\r\n                        }\r\n                    });\r\n                    Object.defineProperty(markerLabel, \"hadjust\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.hadjust);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(markerLabel, \"vadjust\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.vadjust);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(markerLabel, \"type\", {\r\n                        get: function () {\r\n                            return $scope.type;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(markerLabel, \"linevadjust\", {\r\n                        get: function () {\r\n                            return SVGUtil.util.Numeric($scope.linevadjust);\r\n                        }\r\n                    });\r\n                    Object.defineProperty(markerLabel, \"labelclass\", {\r\n                        get: function () {\r\n                            return $scope.labelclass;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(markerLabel, \"labelstyle\", {\r\n                        get: function () {\r\n                            return $scope.labelstyle;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(markerLabel, \"linestyle\", {\r\n                        get: function () {\r\n                            return $scope.linestyle;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(markerLabel, \"lineclass\", {\r\n                        get: function () {\r\n                            return $scope.lineclass;\r\n                        }\r\n                    });\r\n                    Object.defineProperty(markerLabel, \"text\", {\r\n                        get: function () {\r\n                            return $scope.text;\r\n                        }\r\n                    });\r\n                }]\r\n            };\r\n        }])\r\n    \r\n        .directive(\"svgelement\", ['SVGUtil', function (SVGUtil) {\r\n            return {\r\n                restrict: 'AE',\r\n                template: function(elem, attr){\r\n                    return '<' + attr.type + '></' + attr.type + '>';\r\n                },\r\n                type : 'svg',\r\n                replace : true,\r\n                transclude: true,\r\n                require: ['^plasmid'],\r\n                scope: {},\r\n                link: function (scope, elem, attr, controllers, transcludeFn) {\r\n\r\n                    //Manually transclude children elements\r\n                    transcludeFn(scope.$parent, function (content) {\r\n                        elem.append(content);\r\n                    });\r\n                }\r\n            };\r\n        }])\r\n    \r\n}());\r\n","/*global angular,document*/\r\n(function () {\r\n\r\n    'use strict';\r\n\r\n    angular.element(document).ready(function () {\r\n        angular.bootstrap(document, ['app']);\r\n    });\r\n\r\n}());\r\n","ScrollHandler = require('./ScrollHandler');\r\n\r\n$(document).ready(function() {\r\n\r\n    $('body').scrollspy({\r\n        target: '#tableofcontents'\r\n    });\r\n});\r\n","/*global angular*/\r\n(function () {\r\n\r\n    'use strict';\r\n\r\n    angular.module(\"angularplasmid.services\", [])\r\n\r\n         .factory(\"SVGUtil\", function () {\r\n            /*\r\n                PUBLIC API\r\n                -----------------------------------------------------------------------\r\n                api - API for working with AngularPlasmid objects on a page\r\n                util - General utilities\r\n                svg - SVG node, path calculations\r\n            */\r\n\r\n            var plasmids = [], tracks = [], markers = [];\r\n\r\n            // Decimal round with precision\r\n            function round10(value, exp) {\r\n                var type = 'round';\r\n                // If the exp is undefined or zero...\r\n                if (typeof exp === 'undefined' || +exp === 0) {\r\n                    return Math[type](value);\r\n                }\r\n                value = +value;\r\n                exp = +exp;\r\n                // If the value is not a number or the exp is not an integer...\r\n                if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\r\n                    return NaN;\r\n                }\r\n                // Shift\r\n                value = value.toString().split('e');\r\n                value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));\r\n                // Shift back\r\n                value = value.toString().split('e');\r\n                return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));\r\n            }\r\n\r\n            function addPlasmid(plasmid) {\r\n                plasmids.push(plasmid);\r\n            }\r\n             \r\n            function plasmid(id) {\r\n                var i;\r\n                for (i = 0; i < plasmids.length; i += 1) {\r\n                    if (plasmids[i].id === id) {\r\n                        return plasmids[i];\r\n                    }\r\n                }\r\n            }\r\n             \r\n            function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\r\n                var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\r\n                return {\r\n                    x: centerX + (radius * Math.cos(angleInRadians)),\r\n                    y: centerY + (radius * Math.sin(angleInRadians))\r\n                };\r\n            }\r\n\r\n            function swapProperties(elemFrom, elemTo) {\r\n                var property, fromProp, i,\r\n                    PROPLIST = ['id', 'name', 'class', 'style', 'filter', 'ng-attr-style', 'ng-attr-class','ng-class'];\r\n\r\n                for (i = 0; i < PROPLIST.length; i += 1) {\r\n                    property = PROPLIST[i];\r\n                    if (elemFrom[0].hasAttribute(property)) {\r\n                        elemTo.attr(property, elemFrom.attr(property));\r\n                        elemFrom.removeAttr(property);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function createNode(name, settings, excludeSettings) {\r\n                var namespace = 'http://www.w3.org/2000/svg',\r\n                    node = document.createElementNS(namespace, name),\r\n                    attribute,\r\n                    value;\r\n\r\n                excludeSettings = excludeSettings || [];\r\n                angular.forEach(settings, function (attribute) {\r\n                    if (excludeSettings.indexOf(attribute) < 0) {\r\n                        value = settings[attribute];\r\n                        if (value !== null && !attribute.match(/\\$/) && (typeof value !== 'string' || value !== '')) {\r\n                            node.setAttribute(attribute, value);\r\n                        }\r\n                    }\r\n                });\r\n                return node;\r\n            }\r\n\r\n            function removeAttributes(element) {\r\n                angular.forEach(['id', 'class', 'style'], function (a) {\r\n                    element.removeAttribute(a);\r\n                });\r\n            }\r\n\r\n            function pathDonut(x, y, radius, width) {\r\n                var innerRing, outerRing, path;\r\n\r\n                x = Number(x || 0);\r\n                y = Number(y || 0);\r\n                radius = Number(radius || 0);\r\n                width = Number(width || 0);\r\n\r\n                innerRing = {\r\n                    start : polarToCartesian(x, y, radius, 359.99),\r\n                    end : polarToCartesian(x, y, radius, 0)\r\n                };\r\n\r\n                outerRing = {\r\n                    start : polarToCartesian(x, y, radius + width, 359.99),\r\n                    end : polarToCartesian(x, y, radius + width, 0)\r\n                };\r\n\r\n                path = [    \"M\", innerRing.start.x, innerRing.start.y,\r\n                                \"A\", radius, radius, 0, 1, 0, innerRing.end.x, innerRing.end.y,\r\n                                \"M\", outerRing.start.x, outerRing.start.y,\r\n                                \"A\", radius + width, radius + width, 0, 1, 0, outerRing.end.x, outerRing.end.y\r\n                            ].join(\" \");\r\n\r\n                return path;\r\n            }\r\n\r\n            function pathArc(x, y, radius, startAngle, endAngle, width, arrowStart, arrowEnd) {\r\n                var d, start, start2, end, arcSweep, arrow_start_1, arrow_start_2, arrow_start_3, arrow_start_4, arrow_end_1, arrow_end_2, arrow_end_3, arrow_end_4;\r\n\r\n                x = Number(x);\r\n                y = Number(y);\r\n                radius = Number(radius);\r\n                startAngle = Number(startAngle);\r\n                endAngle = Number(endAngle);\r\n                width = Number(width);\r\n                arrowStart = arrowStart || {width : 0, length : 0, angle: 0};\r\n                arrowEnd = arrowEnd || {width : 0, length : 0, angle: 0};\r\n\r\n                if (startAngle === endAngle) {\r\n                    // Draw a line\r\n                    start = polarToCartesian(x, y, radius, startAngle);\r\n                    end = polarToCartesian(x, y, radius + width, startAngle);\r\n                    d = [\"M\", start.x, start.y, \"L\", end.x, end.y].join(\" \");\r\n                } else {\r\n                    //Draw a \"simple\" arc if the width is 1\r\n                    if (width === 1) {\r\n                        start = polarToCartesian(x, y, radius, startAngle);\r\n                        end = polarToCartesian(x, y, radius, endAngle);\r\n                        if (startAngle < endAngle) {\r\n                            arcSweep = endAngle - startAngle <= 180 ? \"0\" : \"1\";\r\n                        } else {\r\n                            arcSweep = endAngle - startAngle <= 180 ? \"1\" : \"0\";\r\n                        }\r\n                        d = [\"M\", start.x, start.y, \"A\", radius, radius, 0, arcSweep, 1, end.x, end.y].join(\" \");\r\n                    } else {\r\n\r\n                        // Draw a \"complex\" arc (We start drawing in reverse, which is why start uses endAngle)\r\n                        endAngle = endAngle - (arrowEnd.length < 0 ? 0 : arrowEnd.length);\r\n                        startAngle = startAngle + (arrowStart.length < 0 ? 0 : arrowStart.length);\r\n                        start = polarToCartesian(x, y, radius, endAngle);\r\n                        end = polarToCartesian(x, y, radius, startAngle);\r\n                        arrow_start_1 = polarToCartesian(x, y, radius - arrowStart.width, startAngle + arrowStart.angle);\r\n                        arrow_start_2 = polarToCartesian(x, y, radius + (width / 2), startAngle - arrowStart.length);\r\n                        arrow_start_3 = polarToCartesian(x, y, radius + width + arrowStart.width, startAngle + arrowStart.angle);\r\n                        arrow_start_4 = polarToCartesian(x, y, radius + width, startAngle);\r\n                        arrow_end_1 = polarToCartesian(x, y, radius + width + arrowEnd.width, endAngle - arrowEnd.angle);\r\n                        arrow_end_2 = polarToCartesian(x, y, radius + (width / 2), endAngle + arrowEnd.length);\r\n                        arrow_end_3 = polarToCartesian(x, y, radius - arrowEnd.width, endAngle - arrowEnd.angle);\r\n                        arrow_end_4 = polarToCartesian(x, y, radius, endAngle);\r\n                        start2 = polarToCartesian(x, y, radius + width, endAngle);\r\n                        arcSweep = endAngle - startAngle <= 180 ? \"0\" : \"1\";\r\n                        d = [\"M\", start.x, start.y, \"A\", radius, radius, 0, arcSweep, 0, end.x, end.y, \"L\", arrow_start_1.x, arrow_start_1.y, \"L\", arrow_start_2.x, arrow_start_2.y, \"L\", arrow_start_3.x, arrow_start_3.y, \"L\", arrow_start_4.x, arrow_start_4.y, \"A\", radius + width, radius + width, 0, arcSweep, 1, start2.x, start2.y, \"L\", arrow_end_1.x, arrow_end_1.y, \"L\", arrow_end_2.x, arrow_end_2.y, \"L\", arrow_end_3.x, arrow_end_3.y, \"L\", arrow_end_4.x, arrow_end_4.y, \"z\"].join(\" \");\r\n                    }\r\n                }\r\n\r\n                return d;\r\n            }\r\n\r\n            function pathScale(x, y, radius, interval, total, tickLength) {\r\n\r\n                x = Number(x || 0);\r\n                y = Number(y || 0);\r\n                radius = Number(radius || 0);\r\n                interval = Number(interval || 0);\r\n                total = Number(total || 0);\r\n                tickLength = Number(tickLength || 2);\r\n\r\n                var alpha, sin, cos, i,\r\n                    numTicks = Number(interval) > 0 ? Number(total) / Number(interval) : 0,\r\n                    beta = 2 * Math.PI / numTicks,\r\n                    precision = -1,\r\n                    d = '';\r\n\r\n                for (i = 0; i < numTicks; i += 1) {\r\n                    alpha = beta * i - Math.PI / 2;\r\n                    cos = Math.cos(alpha);\r\n                    sin = Math.sin(alpha);\r\n                    d += \"M\" + round10((x + (radius * cos)), precision) + \",\" + round10((y + (radius * sin)), precision) + \" L\" + round10((x + ((radius + tickLength) * cos)), precision) + \",\" + round10((y + ((radius + tickLength) * sin)), precision) + \" \";\r\n                }\r\n                d = d || \"M 0,0\";\r\n                return d;\r\n\r\n            }\r\n\r\n            function elementScaleLabels(x, y, radius, interval, total) {\r\n\r\n                x = Number(x);\r\n                y = Number(y);\r\n                radius = Number(radius);\r\n                interval = Number(interval);\r\n                total = Number(total);\r\n\r\n                var alpha, sin, cos, i,\r\n                    numTicks = Number(interval) > 0 ? Number(total) / Number(interval) : 0,\r\n                    beta = 2 * Math.PI / numTicks,\r\n                    precision = -1,\r\n                    labelArr = [];\r\n\r\n\r\n                for (i = 0; i < numTicks; i += 1) {\r\n                    alpha = beta * i - Math.PI / 2;\r\n                    cos = Math.cos(alpha);\r\n                    sin = Math.sin(alpha);\r\n                    labelArr.push({\r\n                        x : round10((x + (radius * cos)), precision),\r\n                        y : round10((y + (radius * sin)), precision),\r\n                        text : interval * i\r\n                    });\r\n                }\r\n                return labelArr;\r\n\r\n            }\r\n\r\n            function Numeric(numberVal, numberDefault) {\r\n                return isNaN(numberVal) ? numberDefault || 0 : Number(numberVal);\r\n            }\r\n\r\n            return {\r\n                api : {\r\n                    addPlasmid : addPlasmid,\r\n                    plasmids : plasmids,\r\n                    plasmid : plasmid,\r\n                    plasmidtracks : tracks,\r\n                    trackmarkers : markers\r\n                },\r\n                util : {\r\n                    polarToCartesian : polarToCartesian,\r\n                    swapProperties : swapProperties,\r\n                    Numeric : Numeric\r\n                },\r\n                svg : {\r\n                    createNode : createNode,\r\n                    removeAttributes : removeAttributes,\r\n                    path : {\r\n                        donut : pathDonut,\r\n                        arc : pathArc,\r\n                        scale : pathScale\r\n                    },\r\n                    element : {\r\n                        scalelabels : elementScaleLabels\r\n                    }\r\n                }\r\n            };\r\n\r\n        });\r\n}());"]}